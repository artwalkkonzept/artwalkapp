{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/artwalkapp-peter/artwalkapp/client/src/components/image.component.js\";\nimport React, { Component } from \"react\";\nimport UploadService from \"../services/file-upload.service\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Images extends Component {\n  constructor(props) {\n    super(props);\n    this.selectFiles = this.selectFiles.bind(this);\n    this.upload = this.upload.bind(this);\n    this.Images = this.Images.bind(this);\n    this.state = {\n      selectedFiles: undefined,\n      previewImages: [],\n      progressInfos: [],\n      message: [],\n      imageInfos: []\n    };\n  }\n\n  componentDidMount() {\n    UploadService.getFiles().then(response => {\n      this.setState({\n        imageInfos: response.data\n      });\n    });\n  }\n\n  selectFiles(event) {\n    let images = [];\n\n    for (let i = 0; i < event.target.files.length; i++) {\n      images.push(URL.createObjectURL(event.target.files[i]));\n    }\n\n    this.setState({\n      progressInfos: [],\n      message: [],\n      selectedFiles: event.target.files,\n      previewImages: images\n    });\n  }\n\n  upload(idx, file) {\n    let _progressInfos = [...this.state.progressInfos];\n    UploadService.upload(file, event => {\n      _progressInfos[idx].percentage = Math.round(100 * event.loaded / event.total);\n      this.setState({\n        progressInfos: _progressInfos\n      });\n    }).then(() => {\n      this.setState(prev => {\n        let nextMessage = [...prev.message, \"Uploaded the image successfully: \" + file.name];\n        return {\n          message: nextMessage\n        };\n      });\n      return UploadService.getFiles();\n    }).then(files => {\n      this.setState({\n        imageInfos: files.data\n      });\n    }).catch(() => {\n      _progressInfos[idx].percentage = 0;\n      this.setState(prev => {\n        let nextMessage = [...prev.message, \"Could not upload the image: \" + file.name];\n        return {\n          progressInfos: _progressInfos,\n          message: nextMessage\n        };\n      });\n    });\n  }\n\n  Images() {\n    const selectedFiles = this.state.selectedFiles;\n    let _progressInfos = [];\n\n    for (let i = 0; i < selectedFiles.length; i++) {\n      _progressInfos.push({\n        percentage: 0,\n        fileName: selectedFiles[i].name\n      });\n    }\n\n    this.setState({\n      progressInfos: _progressInfos,\n      message: []\n    }, () => {\n      for (let i = 0; i < selectedFiles.length; i++) {\n        this.upload(i, selectedFiles[i]);\n      }\n    });\n  }\n\n  render() {\n    const {\n      previewImages,\n      progressInfos,\n      message,\n      imageInfos\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), progressInfos && progressInfos.map((progressInfo, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: progressInfo.fileName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bar progress-bar-info\",\n            role: \"progressbar\",\n            \"aria-valuenow\": progressInfo.percentage,\n            \"aria-valuemin\": \"0\",\n            \"aria-valuemax\": \"100\",\n            style: {\n              width: progressInfo.percentage + \"%\"\n            },\n            children: [progressInfo.percentage, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }, this)), previewImages && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: previewImages.map((img, i) => {\n          return /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"preview\",\n            src: img,\n            alt: \"image-\" + i\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 22\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this), message.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-secondary mt-2\",\n        role: \"alert\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: message.map((item, i) => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: item\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 24\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-header\",\n          children: \"List of Files\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-group list-group-flush\",\n          children: imageInfos && imageInfos.map((img, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"list-group-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                href: img.url,\n                children: img.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 22\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: img.url,\n              alt: img.name,\n              height: \"80px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n/*\n<label className=\"btn btn-default p-0\">\n              <input type=\"file\" multiple accept=\"image/*\" onChange={this.selectFiles} />\n            </label>\n\n\n <div className=\"col-4\">\n            <button\n              className=\"btn btn-success btn-sm\"\n              disabled={!selectedFiles}\n              onClick={this.Images}\n            >\n              Upload\n            </button>\n          </div>*/","map":{"version":3,"sources":["/Users/admin/Desktop/artwalkapp-peter/artwalkapp/client/src/components/image.component.js"],"names":["React","Component","UploadService","Images","constructor","props","selectFiles","bind","upload","state","selectedFiles","undefined","previewImages","progressInfos","message","imageInfos","componentDidMount","getFiles","then","response","setState","data","event","images","i","target","files","length","push","URL","createObjectURL","idx","file","_progressInfos","percentage","Math","round","loaded","total","prev","nextMessage","name","catch","fileName","render","map","progressInfo","index","width","img","item","url"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport UploadService from \"../services/file-upload.service\";\n\nexport default class Images extends Component {\n  constructor(props) {\n    super(props);\n    this.selectFiles = this.selectFiles.bind(this);\n    this.upload = this.upload.bind(this);\n    this.Images = this.Images.bind(this);\n\n    this.state = {\n      selectedFiles: undefined,\n      previewImages: [],\n      progressInfos: [],\n      message: [],\n\n      imageInfos: [],\n    };\n  }\n\n  componentDidMount() {\n    UploadService.getFiles().then((response) => {\n      this.setState({\n        imageInfos: response.data,\n      });\n    });\n  }\n\n  selectFiles(event) {\n    let images = [];\n\n    for (let i = 0; i < event.target.files.length; i++) {\n      images.push(URL.createObjectURL(event.target.files[i]))\n    }\n\n    this.setState({\n      progressInfos: [],\n      message: [],\n      selectedFiles: event.target.files,\n      previewImages: images\n    });\n  }\n\n  upload(idx, file) {\n    let _progressInfos = [...this.state.progressInfos];\n\n    UploadService.upload(file, (event) => {\n      _progressInfos[idx].percentage = Math.round((100 * event.loaded) / event.total);\n      this.setState({\n        progressInfos: _progressInfos,\n      });\n    })\n      .then(() => {\n        this.setState((prev) => {\n          let nextMessage = [...prev.message, \"Uploaded the image successfully: \" + file.name];\n          return {\n            message: nextMessage\n          };\n        });\n\n        return UploadService.getFiles();\n      })\n      .then((files) => {\n        this.setState({\n          imageInfos: files.data,\n        });\n      })\n      .catch(() => {\n        _progressInfos[idx].percentage = 0;\n        this.setState((prev) => {\n          let nextMessage = [...prev.message, \"Could not upload the image: \" + file.name];\n          return {\n            progressInfos: _progressInfos,\n            message: nextMessage\n          };\n        });\n      });\n  }\n\n  Images() {\n    const selectedFiles = this.state.selectedFiles;\n\n    let _progressInfos = [];\n\n    for (let i = 0; i < selectedFiles.length; i++) {\n      _progressInfos.push({ percentage: 0, fileName: selectedFiles[i].name });\n    }\n\n    this.setState(\n      {\n        progressInfos: _progressInfos,\n        message: [],\n      },\n      () => {\n        for (let i = 0; i < selectedFiles.length; i++) {\n          this.upload(i, selectedFiles[i]);\n        }\n      }\n    );\n  }\n\n  render() {\n    const { previewImages, progressInfos, message, imageInfos } = this.state;\n\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-8\">\n            \n\n          </div>\n\n         \n        </div>\n\n        {progressInfos &&\n          progressInfos.map((progressInfo, index) => (\n            <div className=\"mb-2\" key={index}>\n              <span>{progressInfo.fileName}</span>\n              <div className=\"progress\">\n                <div\n                  className=\"progress-bar progress-bar-info\"\n                  role=\"progressbar\"\n                  aria-valuenow={progressInfo.percentage}\n                  aria-valuemin=\"0\"\n                  aria-valuemax=\"100\"\n                  style={{ width: progressInfo.percentage + \"%\" }}\n                >\n                  {progressInfo.percentage}%\n                </div>\n              </div>\n            </div>\n          ))}\n\n        {previewImages && (\n          <div>\n            {previewImages.map((img, i) => {\n              return <img className=\"preview\" src={img} alt={\"image-\" + i}  key={i}/>;\n            })}\n          </div>\n        )}\n\n        {message.length > 0 && (\n          <div className=\"alert alert-secondary mt-2\" role=\"alert\">\n            <ul>\n              {message.map((item, i) => {\n                return <li key={i}>{item}</li>;\n              })}\n            </ul>\n          </div>\n        )}\n\n        <div className=\"card mt-3\">\n          <div className=\"card-header\">List of Files</div>\n          <ul className=\"list-group list-group-flush\">\n            {imageInfos &&\n              imageInfos.map((img, index) => (\n                <li className=\"list-group-item\" key={index}>\n                  <p><a href={img.url}>{img.name}</a></p>\n                  <img src={img.url} alt={img.name} height=\"80px\" />\n                </li>\n              ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\n/*\n<label className=\"btn btn-default p-0\">\n              <input type=\"file\" multiple accept=\"image/*\" onChange={this.selectFiles} />\n            </label>\n\n\n <div className=\"col-4\">\n            <button\n              className=\"btn btn-success btn-sm\"\n              disabled={!selectedFiles}\n              onClick={this.Images}\n            >\n              Upload\n            </button>\n          </div>*/"]},"metadata":{},"sourceType":"module"}