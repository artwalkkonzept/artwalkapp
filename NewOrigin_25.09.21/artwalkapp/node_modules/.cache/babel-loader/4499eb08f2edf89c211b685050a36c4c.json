{"ast":null,"code":"import React from 'react';\n\nconst mongoose = require(\"mongoose\"); // use recipes;\n\n\nmongoose.connect(\"mongodb://localhost/recipes\", {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\nfunction ShowStuff(props) {\n  return async function ShowStuff() {\n    const recipeSchema = new mongoose.Schema({\n      title: String,\n      description: String,\n      cookingTime: Number,\n      ingredients: [String]\n    });\n    const Recipe = mongoose.model(\"Recipe\", recipeSchema);\n    const pizza = new Recipe({\n      title: \"Pizza\",\n      description: \"Pizza is nice\",\n      cookingTime: 60,\n      ingredients: [\"tomato\", \"cheese\", \"onion\", \"Tuna\", \"Garlic\"]\n    });\n\n    try {\n      const savedPizza = await pizza.save();\n      console.log(savedPizza[\"_id\"], \"has been saved\");\n    } catch (error) {\n      console.error(error);\n    } // Find first recipe with name 'pizza', but ignores case\n\n\n    const foundPizza = await Recipe.findOne({\n      title: /pizza/i\n    });\n    console.log(\"Found a recipe:\", foundPizza);\n    const arrayResult = await Recipe.find({\n      title: /pizza/i\n    });\n    console.log(\"Found recipes:\", arrayResult);\n    mongoose.disconnect();\n  };\n}\n\n_c = ShowStuff;\nexport default ShowStuff;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShowStuff\");","map":{"version":3,"sources":["/Users/admin/artwalkapp/src/ShowStuff.js"],"names":["React","mongoose","require","connect","useNewUrlParser","useUnifiedTopology","ShowStuff","props","recipeSchema","Schema","title","String","description","cookingTime","Number","ingredients","Recipe","model","pizza","savedPizza","save","console","log","error","foundPizza","findOne","arrayResult","find","disconnect"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB,C,CAEE;;;AACAD,QAAQ,CAACE,OAAT,CAAiB,6BAAjB,EAAgD;AAAEC,EAAAA,eAAe,EAAE,IAAnB;AAAyBC,EAAAA,kBAAkB,EAAE;AAA7C,CAAhD;;AAGF,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,SAIE,eAAeD,SAAf,GAA2B;AAEzB,UAAME,YAAY,GAAG,IAAIP,QAAQ,CAACQ,MAAb,CAAoB;AACvCC,MAAAA,KAAK,EAAEC,MADgC;AAEvCC,MAAAA,WAAW,EAAED,MAF0B;AAGvCE,MAAAA,WAAW,EAAEC,MAH0B;AAIvCC,MAAAA,WAAW,EAAE,CAACJ,MAAD;AAJ0B,KAApB,CAArB;AAOA,UAAMK,MAAM,GAAGf,QAAQ,CAACgB,KAAT,CAAe,QAAf,EAAyBT,YAAzB,CAAf;AAEA,UAAMU,KAAK,GAAG,IAAIF,MAAJ,CAAW;AACvBN,MAAAA,KAAK,EAAE,OADgB;AAEvBE,MAAAA,WAAW,EAAE,eAFU;AAGvBC,MAAAA,WAAW,EAAE,EAHU;AAIvBE,MAAAA,WAAW,EAAE,CAAC,QAAD,EAAW,QAAX,EAAqB,OAArB,EAA8B,MAA9B,EAAsC,QAAtC;AAJU,KAAX,CAAd;;AAOA,QAAI;AACF,YAAMI,UAAU,GAAG,MAAMD,KAAK,CAACE,IAAN,EAAzB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,UAAU,CAAC,KAAD,CAAtB,EAA+B,gBAA/B;AACD,KAHD,CAGE,OAAOI,KAAP,EAAc;AACdF,MAAAA,OAAO,CAACE,KAAR,CAAcA,KAAd;AACD,KAvBwB,CAyBzB;;;AACA,UAAMC,UAAU,GAAG,MAAMR,MAAM,CAACS,OAAP,CAAe;AAAEf,MAAAA,KAAK,EAAE;AAAT,KAAf,CAAzB;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BE,UAA/B;AAEA,UAAME,WAAW,GAAG,MAAMV,MAAM,CAACW,IAAP,CAAY;AAAEjB,MAAAA,KAAK,EAAE;AAAT,KAAZ,CAA1B;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BI,WAA9B;AAEAzB,IAAAA,QAAQ,CAAC2B,UAAT;AACD,GArCH;AAwCD;;KAzCQtB,S;AA2CT,eAAeA,SAAf","sourcesContent":["import React from 'react';\n\nconst mongoose = require(\"mongoose\");\n\n  // use recipes;\n  mongoose.connect(\"mongodb://localhost/recipes\", { useNewUrlParser: true, useUnifiedTopology: true });\n    \n\nfunction ShowStuff(props) {\n  return(\n    \n  \n    \n    async function ShowStuff() {\n     \n      const recipeSchema = new mongoose.Schema({\n        title: String,\n        description: String,\n        cookingTime: Number,\n        ingredients: [String]\n      });\n      \n      const Recipe = mongoose.model(\"Recipe\", recipeSchema);\n      \n      const pizza = new Recipe({\n        title: \"Pizza\",\n        description: \"Pizza is nice\",\n        cookingTime: 60,\n        ingredients: [\"tomato\", \"cheese\", \"onion\", \"Tuna\", \"Garlic\"]\n      });\n      \n      try {\n        const savedPizza = await pizza.save();\n        console.log(savedPizza[\"_id\"], \"has been saved\");\n      } catch (error) {\n        console.error(error);\n      }\n    \n      // Find first recipe with name 'pizza', but ignores case\n      const foundPizza = await Recipe.findOne({ title: /pizza/i });\n      console.log(\"Found a recipe:\", foundPizza);\n    \n      const arrayResult = await Recipe.find({ title: /pizza/i });\n      console.log(\"Found recipes:\", arrayResult);\n    \n      mongoose.disconnect();\n    }\n    \n  );\n}\n\nexport default ShowStuff;\n"]},"metadata":{},"sourceType":"module"}