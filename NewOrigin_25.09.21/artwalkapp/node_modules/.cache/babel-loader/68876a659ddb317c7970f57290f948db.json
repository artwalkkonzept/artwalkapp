{"ast":null,"code":"var _jsxFileName = \"/Users/admin/artwalkapp/src/ShowStuff.js\";\nimport React from 'react';\nlet props = {\n  imageUrl: \"https://res.cloudinary.com/glide/image/fetch/f_auto,w_300,h_300,c_lfill/https%3A%2F%2Ffirebasestorage.googleapis.com%2Fv0%2Fb%2Fglide-prod.appspot.com%2Fo%2Ficon-images%252Fanonymous-e7fcf338-8a49-44d2-9fcb-afd802a823c8.png%3Falt%3Dmedia%26token%3D161e099a-1f69-426e-8633-ca4f70b80502\",\n  imageText: \"image1\"\n};\n\nfunction ShowStuff(props) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"background-green\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }\n  }, \"Shows the Tour\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }, \"Name of the Tour is: \", props.name));\n}\n\n_c = ShowStuff;\n\nconst Show = ({\n  imageUrl,\n  imageText\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  className: \"img-with-text\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"img\", {\n  src: props.imageUrl,\n  alt: \"\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 3\n  }\n}), /*#__PURE__*/React.createElement(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 3\n  }\n}, props.imageText), /*#__PURE__*/React.createElement(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 3\n  }\n}, props.name));\n\n_c2 = Show;\nexport default ShowStuff;\n/*\nconst mongoose = require(\"mongoose\");\n\n// use recipes;\nmongoose.connect(\"mongodb://localhost/recipes\", { useNewUrlParser: true, useUnifiedTopology: true });\n\nasync function doStuff() {\n  const recipeSchema = new mongoose.Schema({\n    title: String,\n    description: String,\n    cookingTime: Number,\n    ingredients: [String]\n  });\n  \n  const Recipe = mongoose.model(\"Recipe\", recipeSchema);\n  \n  const pizza = new Recipe({\n    title: \"Pizza\",\n    description: \"Pizza is nice\",\n    cookingTime: 60,\n    ingredients: [\"tomato\", \"cheese\", \"onion\", \"Tuna\", \"Garlic\"]\n  });\n  \n  try {\n    const savedPizza = await pizza.save();\n    console.log(savedPizza[\"_id\"], \"has been saved\");\n  } catch (error) {\n    console.error(error);\n  }\n\n  // Find first recipe with name 'pizza', but ignores case\n  const foundPizza = await Recipe.findOne({ title: /pizza/i });\n  console.log(\"Found a recipe:\", foundPizza);\n\n  const arrayResult = await Recipe.find({ title: /pizza/i });\n  console.log(\"Found recipes:\", arrayResult);\n\n  mongoose.disconnect();\n}\n\ndoStuff();\n\n*/\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ShowStuff\");\n$RefreshReg$(_c2, \"Show\");","map":{"version":3,"sources":["/Users/admin/artwalkapp/src/ShowStuff.js"],"names":["React","props","imageUrl","imageText","ShowStuff","name","Show"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAIC,KAAK,GAAG;AACVC,EAAAA,QAAQ,EAAC,8RADC;AAEVC,EAAAA,SAAS,EAAC;AAFA,CAAZ;;AAIE,SAASC,SAAT,CAAmBH,KAAnB,EAA0B;AACxB,sBAEJ;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADN,eAEM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAyBA,KAAK,CAACI,IAA/B,CAFN,CAFI;AAOH;;KARUD,S;;AASX,MAAME,IAAI,GAAG,CAAC;AAACJ,EAAAA,QAAD;AAAWC,EAAAA;AAAX,CAAD,kBACX;AAAK,EAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACA;AAAK,EAAA,GAAG,EAAEF,KAAK,CAACC,QAAhB;AAA2B,EAAA,GAAG,EAAC,EAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAKD,KAAK,CAACE,SAAX,CAFA,eAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAIF,KAAK,CAACI,IAAV,CAHA,CADF;;MAAMC,I;AAQN,eAAeF,SAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\n\nlet props = {\n  imageUrl:\"https://res.cloudinary.com/glide/image/fetch/f_auto,w_300,h_300,c_lfill/https%3A%2F%2Ffirebasestorage.googleapis.com%2Fv0%2Fb%2Fglide-prod.appspot.com%2Fo%2Ficon-images%252Fanonymous-e7fcf338-8a49-44d2-9fcb-afd802a823c8.png%3Falt%3Dmedia%26token%3D161e099a-1f69-426e-8633-ca4f70b80502\",\n  imageText:\"image1\"\n  }\n  function ShowStuff(props) {\n    return(\n\n<div className=\"background-green\">\n      <h1>Shows the Tour</h1>\n      <p>Name of the Tour is: {props.name}</p>\n    </div>\n  );\n}\nconst Show = ({imageUrl, imageText}) => (\n  <div className=\"img-with-text\">\n  <img src={props.imageUrl}  alt=\"\"/>\n  <p >{props.imageText}</p>\n  <p>{props.name}</p>\n</div>\n);\n\nexport default ShowStuff;\n\n/*\nconst mongoose = require(\"mongoose\");\n\n// use recipes;\nmongoose.connect(\"mongodb://localhost/recipes\", { useNewUrlParser: true, useUnifiedTopology: true });\n\nasync function doStuff() {\n  const recipeSchema = new mongoose.Schema({\n    title: String,\n    description: String,\n    cookingTime: Number,\n    ingredients: [String]\n  });\n  \n  const Recipe = mongoose.model(\"Recipe\", recipeSchema);\n  \n  const pizza = new Recipe({\n    title: \"Pizza\",\n    description: \"Pizza is nice\",\n    cookingTime: 60,\n    ingredients: [\"tomato\", \"cheese\", \"onion\", \"Tuna\", \"Garlic\"]\n  });\n  \n  try {\n    const savedPizza = await pizza.save();\n    console.log(savedPizza[\"_id\"], \"has been saved\");\n  } catch (error) {\n    console.error(error);\n  }\n\n  // Find first recipe with name 'pizza', but ignores case\n  const foundPizza = await Recipe.findOne({ title: /pizza/i });\n  console.log(\"Found a recipe:\", foundPizza);\n\n  const arrayResult = await Recipe.find({ title: /pizza/i });\n  console.log(\"Found recipes:\", arrayResult);\n\n  mongoose.disconnect();\n}\n\ndoStuff();\n\n*/"]},"metadata":{},"sourceType":"module"}